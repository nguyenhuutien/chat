/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class Control extends javax.swing.JFrame {

    /**
     * Creates new form Control
     */
    String username;
    private Socket socket;
    String ip;
    int port;
    int room;
    int allow = 0;
    String user = "";
    String select;
    private InputStream is;
    private OutputStream os;
BufferedImage bufferedImage;
    private DefaultListModel<String> mo = new DefaultListModel<>();

    public Control(String name, String IP, int PORT, InputStream ins, OutputStream ous) {
        initComponents();
        this.username = name;
        ip = IP;
        port = PORT;
        is = ins;
        os = ous;
        setResizable(false);
        String url = System.getProperty("user.dir", null);
        String urlIcon;
        urlIcon = url + "\\icon\\115.png";
        btCreate.setIcon(new javax.swing.ImageIcon(urlIcon));
        btCreate.setBackground(new Color(255, 204, 255));
        urlIcon = url + "\\icon\\27.png";
        btPass.setIcon(new javax.swing.ImageIcon(urlIcon));
        btPass.setBackground(new Color(255, 204, 255));
        urlIcon = url + "\\icon\\27.png";
        btAvatar.setIcon(new javax.swing.ImageIcon(urlIcon));
        btAvatar.setBackground(new Color(255, 204, 255));
        urlIcon = url + "\\icon\\176.png";
        btExit.setIcon(new javax.swing.ImageIcon(urlIcon));
        btExit.setBackground(new Color(255, 204, 255));
        getContentPane().setBackground(new Color(153, 235, 255));
        setTitle("Cửa sổ chat - " + name);
        Listen();
        this.addWindowListener(new WindowListener() {

            @Override
            public void windowOpened(WindowEvent we) {
            }

            @Override
            public void windowClosing(WindowEvent we) {
                try {
                    String str = "TXTEXITEMP" + username + "|null";
                    byte[] exit = str.getBytes(Charset.forName("UTF-8"));
                    byte[] size = ByteBuffer.allocate(9).putInt(exit.length).array();
                    os.write(size);
                    os.write(exit);
                    os.flush();
                    Thread.sleep(50);
                    dispose();

                } catch (InterruptedException ex) {
                    Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void windowClosed(WindowEvent we) {
            }

            @Override
            public void windowIconified(WindowEvent we) {
            }

            @Override
            public void windowDeiconified(WindowEvent we) {
            }

            @Override
            public void windowActivated(WindowEvent we) {
            }

            @Override
            public void windowDeactivated(WindowEvent we) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lChat = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        btCreate = new javax.swing.JButton();
        btPass = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lRoom = new javax.swing.JList();
        btAvatar = new javax.swing.JButton();
        spAvatar = new javax.swing.JScrollPane();
        pnAvatar = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 255));

        lChat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lChatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lChat);

        jLabel1.setText("Danh sách bạn bè");

        btCreate.setText("Tạo phòng");
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });

        btPass.setText("Mật khẩu");
        btPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPassActionPerformed(evt);
            }
        });

        btExit.setText("Thoát");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        jLabel3.setText("Danh sách phòng");

        lRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lRoom);

        btAvatar.setText("Avatar");
        btAvatar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAvatarActionPerformed(evt);
            }
        });

        spAvatar.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        spAvatar.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout pnAvatarLayout = new javax.swing.GroupLayout(pnAvatar);
        pnAvatar.setLayout(pnAvatarLayout);
        pnAvatarLayout.setHorizontalGroup(
            pnAvatarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        pnAvatarLayout.setVerticalGroup(
            pnAvatarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        spAvatar.setViewportView(pnAvatar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btAvatar)
                            .addComponent(btPass)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(btCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btExit, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btAvatar, btPass});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btExit, jScrollPane1, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btAvatar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btPass))
                    .addComponent(spAvatar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExit)
                    .addComponent(btCreate))
                .addGap(26, 26, 26))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btAvatar, btCreate, btExit, btPass});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class listen implements Runnable {

        @Override
        public void run() {

            try {
                byte[] size = new byte[9];
                while (is.read(size) != 0) {
                    int bytesRead = 0;
                    int bytesToRead = 0;

                    bytesToRead = ByteBuffer.wrap(size).asIntBuffer().get();
                    byte[] mybytearray = new byte[bytesToRead];
                    while (bytesRead < bytesToRead) {
                        bytesRead += is.read(mybytearray, bytesRead, bytesToRead - bytesRead);
                    }
                    String format = new String(mybytearray, 0, 3, "UTF-8");
                    String cmd = new String(mybytearray, 3, 3, "UTF-8");
                    String extra = new String(mybytearray, 6, 4, "UTF-8");
                    System.out.println(format + " " + cmd + " " + extra);
                    switch (format) {
                        case "TXT":
                            String data = new String(mybytearray, 10, mybytearray.length - 10, "UTF-8");
                            System.out.println(data);
                            String[] dt = data.split("[|,:]");
                            if (cmd.equals("LIS") && extra.equals("USER")) {
                                DefaultListModel<String> model = new DefaultListModel<>();
                                for (int i = 0; i < dt.length - 1; i += 2) {
                                    if (dt[i + 1].equals("1")) {
                                        dt[i] = String.format("<html><font color=\"red\">" + dt[i] + "</font></html>", dt[i]);
                                        model.addElement(dt[i]);
                                    } else if (dt[i + 1].equals("0")) {
                                        dt[i] = String.format("<html><font color=\"black\">" + dt[i] + "</font></html>", dt[i]);
                                        model.addElement(dt[i]);

                                    }
                                }
                                model = arrangement(model);
                                lChat.setModel(model);

                            }
                            if (cmd.equals("SUC")) {
                                allow = 1;
                                room = Integer.parseInt(dt[0]);
                            } else if (cmd.equals("EXI")) {
                                allow = 0;
                            }

                            if (cmd.equals("OFF")) {
                                if (extra.equals("ROOM")) {
                                    Socket socket;
                                    InputStream is;
                                    OutputStream os;
                                    socket = new Socket(ip, port);
                                    os = socket.getOutputStream();
                                    room = Integer.parseInt(dt[0]);
                                    String str = "TXTLISnull" + username + "|" + String.valueOf(room);
                                    byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
                                    size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
                                    os.write(size);
                                    os.write(sendlist);
                                    os.flush();
                                    is = socket.getInputStream();
                                    FrameChat frameChat = new FrameChat(username, ip, port, is, os, room,bufferedImage);
                                    frameChat.setVisible(true);
                                } else if (extra.equals("SING")) {
                                    Socket socket;
                                    InputStream is;
                                    OutputStream os;
                                    socket = new Socket(ip, port);
                                    os = socket.getOutputStream();
                                    room = Integer.parseInt(dt[0]);
                                    String str = "TXTLISnull" + username + "|" + String.valueOf(room);
                                    byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
                                    size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
                                    os.write(size);
                                    os.write(sendlist);
                                    os.flush();
                                    is = socket.getInputStream();
                                    FrChat frChat = new FrChat(username, dt[1], ip, port, is, os, room,bufferedImage);
                                    frChat.setVisible(true);
                                }

                            }
                            if (cmd.equals("ADD")) {
                                if (extra.equals("ROOM")) {
                                    if ((dt[1].equals(username)) == false) {
                                        acceptRoom(dt[0]);
                                    }
                                } else if (extra.equals("SING")) {
                                    if ((dt[1].equals(username)) == false) {
                                        accept(dt[1], dt[0]);
                                    }
                                }
                            }
                            if (cmd.equals("EXP")) {
                                mo.removeElement(dt[0]);
                                lRoom.setModel(mo);
                            }
                            if (cmd.equals("ADP")) {
                                mo.addElement(dt[0]);
                                lRoom.setModel(mo);
                            }

                            break;
                        case "AVA":
                            if (cmd.equals("TAR")) {
                                int i = 0;
                                for (int j = 6; j < 10; j++) {
                                    size[i++] = mybytearray[j];
                                }
                                int ex = ByteBuffer.wrap(size).asIntBuffer().get();
                                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(mybytearray, 10, ex);
                                bufferedImage = ImageIO.read(byteArrayInputStream);
                                pnAvatar = new javax.swing.JPanel() {
                                    @Override
                                    protected void paintComponent(Graphics g) {
                                        super.paintComponent(g);
                                        g.drawImage(bufferedImage, 0, 0, pnAvatar.getWidth(), pnAvatar.getHeight(), null);
                                        repaint();
                                    }
                                };
                                spAvatar.setViewportView(pnAvatar);
                            }  
                            break;

                    }
                }

            } catch (IOException ex) {
                Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void Listen() {
        Thread readData = new Thread(new listen());
        readData.start();
    }


    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        createRoom("null");

    }//GEN-LAST:event_btCreateActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        try {
            String str = "TXTEXITEMP" + username + "|null";
            byte[] exit = str.getBytes(Charset.forName("UTF-8"));
            byte[] size = ByteBuffer.allocate(9).putInt(exit.length).array();
            os.write(size);
            os.write(exit);
            os.flush();
            Thread.sleep(50);
            System.exit(0);
        } catch (InterruptedException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btExitActionPerformed

    private void btPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPassActionPerformed
        UpdatePass updatePass = new UpdatePass(username, ip, port);
        updatePass.setVisible(true);
    }//GEN-LAST:event_btPassActionPerformed

    private void lChatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lChatMouseClicked
        if (evt.getClickCount() == 2) {
            select = (String) lChat.getSelectedValue();
            select = correctList(select);
            if ((select.equals(username) == false)) {
                create(select);
            }
        }
    }//GEN-LAST:event_lChatMouseClicked

    private void lRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lRoomMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                select = (String) lRoom.getSelectedValue();
                Socket socket;
                InputStream is;
                OutputStream os;
                socket = new Socket(ip, port);
                os = socket.getOutputStream();
                String str = "TXTLISnull" + username + "|" + select;
                byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
                byte[] size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
                os.write(size);
                os.write(sendlist);
                os.flush();
                is = socket.getInputStream();
                room = Integer.parseInt(select);
                FrameChat frameChat = new FrameChat(username, ip, port, is, os, room,bufferedImage);
                frameChat.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_lRoomMouseClicked

    private void btAvatarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAvatarActionPerformed
        FileChooser fc = new FileChooser("Update avatar", FileChooser.FILE_OPEN, "png, jpg, jpeg, gif", "Select a photo (*png, *jpg)");
        if (fc.isSuccess()) {
            try {
                BufferedInputStream bis = null;
                ImageProcess ip = new ImageProcess();
                File myFile = fc.getFile();
                if(myFile.length()<=3000000){
                bufferedImage = ip.getIconFromFile(myFile);
                String STR = "AVATAR";
                byte[] str = STR.getBytes(Charset.forName("UTF-8"));
                byte[] sizeName = ByteBuffer.allocate(4).putInt(username.length()).array();
                byte[] name = username.getBytes(Charset.forName("UTF-8"));
                byte[] byteImage = new byte[(int) myFile.length() + str.length + sizeName.length + name.length];
                int i = 0;
                for (i = 0; i < str.length; i++) {
                    byteImage[i] = str[i];
                }
                for (int j = 0; j < sizeName.length; j++) {
                    byteImage[i++] = sizeName[j];
                }
                for (int j = 0; j < name.length; j++) {
                    byteImage[i++] = name[j];
                }
                bis = new BufferedInputStream(new FileInputStream(myFile));
                bis.read(byteImage, str.length + sizeName.length + name.length, byteImage.length - str.length - sizeName.length - name.length);
                byte[] size = ByteBuffer.allocate(9).putInt(byteImage.length).array();
                os.write(size);
                os.write(byteImage);
                os.flush();
                  JOptionPane.showMessageDialog(null, "Cập nhật avatar thành công!");
                }else{
                JOptionPane.showMessageDialog(null, "Kích thước tối đa là 3MB");
                }
               
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btAvatarActionPerformed

    public void createRoom(String name) {
        try {
            Socket socket;
            InputStream is;
            OutputStream os;
            socket = new Socket(ip, port);
            os = socket.getOutputStream();
            String str = "TXTCROnull" + username + "|" + name;
            byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
            byte[] size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
            os.write(size);
            os.write(sendlist);
            os.flush();
            is = socket.getInputStream();
            Thread.sleep(500);
            if (allow != 0) {
                allow = 0;
                FrameChat frameChat = new FrameChat(username, ip, port, is, os, room,bufferedImage);
                frameChat.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void acceptRoom(String number) {
        try {

            Socket socket;
            InputStream is;
            OutputStream os;
            socket = new Socket(ip, port);
            os = socket.getOutputStream();
            String str = "TXTCROACCE" + username + "|" + number + "|ROOM";
            byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
            byte[] size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
            os.write(size);
            os.write(sendlist);
            os.flush();
            is = socket.getInputStream();
            room = Integer.parseInt(number);
            FrameChat frameChat = new FrameChat(username, ip, port, is, os, room,bufferedImage);
            frameChat.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void create(String name) {
        try {
            Socket socket;
            InputStream is;
            OutputStream os;
            socket = new Socket(ip, port);
            os = socket.getOutputStream();
            String str = "TXTCROnull" + username + "|" + name;
            byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
            byte[] size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
            os.write(size);
            os.write(sendlist);
            os.flush();
        
            is = socket.getInputStream();
            Thread.sleep(500);
            if (allow != 0) {
                allow = 0;
                str = "TXTLISnull" + username + "|" + room;
                sendlist = str.getBytes(Charset.forName("UTF-8"));
                size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
                os.write(size);
                os.write(sendlist);
                os.flush();
                FrChat frChat = new FrChat(username, name, ip, port, is, os, room,bufferedImage);
                frChat.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void accept(String name, String number) {
        try {
            Socket socket;
            InputStream is;
            OutputStream os;
            socket = new Socket(ip, port);
            os = socket.getOutputStream();
            String str = "TXTCROACCE" + username + "|" + number + "|SINGLE";
            byte[] sendlist = str.getBytes(Charset.forName("UTF-8"));
            byte[] size = ByteBuffer.allocate(9).putInt(sendlist.length).array();
            os.write(size);
            os.write(sendlist);
            os.flush();
            is = socket.getInputStream();
            room = Integer.parseInt(number);
            FrChat frChat = new FrChat(username, name, ip, port, is, os, room,bufferedImage);
            frChat.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Control.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String correctList(String user) {
        user = user.replaceAll("<html><font color=\"red\">", "");
        user = user.replaceAll("<html><font color=\"black\">", "");
        user = user.replaceAll("</font></html>", "");
        return user;
    }

    public DefaultListModel<String> arrangement(DefaultListModel<String> model) {
        for (int i = 0; i < model.getSize(); i++) {
            for (int j = i + 1; j < model.getSize(); j++) {
                if (correctList(model.get(i)).compareTo(correctList(model.get(j))) > 0) {
                    String tem;
                    tem = model.get(i);
                    model.setElementAt(model.get(j), i);
                    model.setElementAt(tem, j);

                }
            }
        }
        return model;
    }
   

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAvatar;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btPass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lChat;
    private javax.swing.JList lRoom;
    private javax.swing.JPanel pnAvatar;
    private javax.swing.JScrollPane spAvatar;
    // End of variables declaration//GEN-END:variables
}
