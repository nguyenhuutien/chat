/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl;

import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author MyPC
 */
public class Client extends javax.swing.JFrame {

    String ip;
    int port = 51195;
    private Socket socket = null;
    String username;
    String password;
    int allow = 0;
    private OutputStream os;
    private InputStream is;

    public Client() {
        initComponents();
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String url = System.getProperty("user.dir", null);
        String urlIcon;
        urlIcon = url + "\\icon\\10.png";
        btLog.setIcon(new javax.swing.ImageIcon(urlIcon));
        btLog.setBackground(new Color(255, 204, 255));
        urlIcon = url + "\\icon\\9.png";
        btSign.setIcon(new javax.swing.ImageIcon(urlIcon));
        btSign.setBackground(new Color(255, 204, 255));
        getContentPane().setBackground(new Color(153, 235, 255));
        setTitle("Đăng nhập");
    }

    public String getIp() throws UnknownHostException {
        InetAddress thisIp = InetAddress.getLocalHost();
        String IP = thisIp.getHostAddress();
        System.out.println(IP);
        return IP;
    }

    public class ReadData implements Runnable {

        @Override
        public void run() {
            try {
                int bytesRead = 0;
                int bytesToRead = 0;
                byte[] size = new byte[9];
                is.read(size);
                bytesToRead = ByteBuffer.wrap(size).asIntBuffer().get();
                byte[] mybytearray = new byte[bytesToRead];
                while (bytesRead < bytesToRead) {
                    bytesRead += is.read(mybytearray, bytesRead, bytesToRead - bytesRead);
                }
                String format = new String(mybytearray, 0, 3, "UTF-8");
                String cmd = new String(mybytearray, 3, 3, "UTF-8");
                String extra = new String(mybytearray, 6, 4, "UTF-8");
                switch (format) {
                    case "TXT":
                        if (cmd.equals("EXI")) {
                            if (extra.equals("FALS")) {
                                JOptionPane.showMessageDialog(null, "Tài khoản không đúng!");
                                tfUser.setText("");
                                pfPw.setText("");
                                tfUser.requestFocus();
                            } else if (extra.equals("SAME")) {
                                JOptionPane.showMessageDialog(null, "Tài khoản đang được đăng nhập!");
                                tfUser.setText("");
                                pfPw.setText("");
                                tfUser.requestFocus();
                            }
                        } else if (cmd.equals("SUC")) {
                            socket.close();
                            Socket socket;
                            socket = new Socket(ip, port);
                            OutputStream os;
                            InputStream is;
                            os = socket.getOutputStream();
                            String str = "TXTLOGACCE" + username + "|" + password;
                            byte[] login = str.getBytes(Charset.forName("UTF-8"));
                            size = ByteBuffer.allocate(9).putInt(login.length).array();
                            os.write(size);
                            os.write(login);
                            os.flush();
                            is = socket.getInputStream();
                            Control control = new Control(username, ip, port, is, os);
                            control.setVisible(true);
                            dispose();
                        }

                        break;
                    case "img":

                        break;
                }

            } catch (IOException ex) {

                System.out.println("socket closed");

            } catch (ArrayIndexOutOfBoundsException ex) {
            }
        }
    }

    public void Listen() {
        Thread readData = new Thread(new ReadData());
        readData.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfAddress = new javax.swing.JTextField();
        tfUser = new javax.swing.JTextField();
        btLog = new javax.swing.JButton();
        pfPw = new javax.swing.JPasswordField();
        btSign = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 204, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Địa chỉ :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 49, 20));

        jLabel2.setText("Tên đăng nhập :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        jLabel4.setText("Mật khẩu :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 20));
        getContentPane().add(tfAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 320, -1));

        tfUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfUserActionPerformed(evt);
            }
        });
        getContentPane().add(tfUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 320, -1));

        btLog.setText("Đăng nhập");
        btLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLogActionPerformed(evt);
            }
        });
        getContentPane().add(btLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, 120, 40));
        getContentPane().add(pfPw, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 320, -1));

        btSign.setText("Đăng kí");
        btSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSignActionPerformed(evt);
            }
        });
        getContentPane().add(btSign, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 110, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLogActionPerformed

        ip = tfAddress.getText();
        username = tfUser.getText();
        password = pfPw.getText();
        if (username.equals("") == false && password.equals("") == false) {
            try {
                try {
                    socket = new Socket(ip, port);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Địa chỉ máy chủ không đúng!");
                    tfAddress.setText("");
                    tfUser.setText("");
                    pfPw.setText("");
                    tfAddress.requestFocus();
                    return;
                }
                os = socket.getOutputStream();
                String str = "TXTLOGnull" + username + "|" + password;
                byte[] login = str.getBytes(Charset.forName("UTF-8"));
                byte[] size = ByteBuffer.allocate(9).putInt(login.length).array();
                os.write(size);
                os.write(login);
                os.flush();
                is = socket.getInputStream();
                Listen();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Tên đăng nhập không đúng!");
            tfAddress.setText("");
            tfUser.setText("");
            pfPw.setText("");
            tfAddress.requestFocus();
            return;
        }

    }//GEN-LAST:event_btLogActionPerformed

    private void btSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSignActionPerformed
        SignIn signIn = new SignIn(ip, port);
        signIn.setVisible(true);
    }//GEN-LAST:event_btSignActionPerformed

    private void tfUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLog;
    private javax.swing.JButton btSign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField pfPw;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables
}
